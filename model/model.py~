# Definition of the generator
def generator(gen_inputs, gen_output_channels, reuse=False, FLAGS=None):
        # Check the flag
        if FLAGS is None:
                raise  ValueError('No FLAGS is provided for generator')
        
        # The Bx residual blocks
        def residual_block(inputs, output_channel, stride, scope):
                with tf.variable_scope(scope):
                        net = conv2(inputs, 3, output_channel, stride, use_bias=False, scope='conv_1')
                        net = batchnorm(net, FLAGS.is_training)
                        net = prelu_tf(net)
                        net = conv2(net, 3, output_channel, stride, use_bias=False, scope='conv_2')
                        net = batchnorm(net, FLAGS.is_training)
                        net = net + inputs
                        
                                                                                                                                    return net
                                                                                                                            
def SRResnet(inputs, targets, FLAGS):
        # Define the container of the parameter
        Network = collections.namedtuple('Network', 'content_loss, gen_grads_and_vars, gen_output, train, global_step, learning_rate')
        
        # Build the generator part
        with tf.variable_scope('generator'):
                output_channel = targets.get_shape().as_list()[-1]
                gen_output = generator(inputs, output_channel, reuse=False, FLAGS=FLAGS)
                                            gen_output.set_shape([FLAGS.batch_size, FLAGS.crop_size * 4, FLAGS.crop_size * 4, 3])                                            

                # MSE 
                extracted_feature_gen = gen_output
                extracted_feature_target = targets

                                            
